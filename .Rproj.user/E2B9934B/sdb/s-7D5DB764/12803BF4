{
    "contents" : "---\ntitle: \"Raport z analizy danych PDB\"\nauthor: \"Maciej Łuczak 100908\"\ndate: \"`r format(Sys.time(), '%d.%m.%Y')`\"\noutput: \n  html_document: \n    keep_md: yes\n    theme: united\n    toc: yes\n---\n\nŁadowanie bibliotek\n---\n```{r biblioteki, warning=FALSE, message=FALSE}\nlibrary(knitr)\nlibrary(dplyr)\nlibrary(psych)\nlibrary(reshape2)\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(caret)\nlibrary(pls)\n```\n\nPowtarzalność raportu\n---\n```{r powtarzalność}\nset.seed(23)\n```\n\nWczytywanie danych\n---\n```{r dane, cache=TRUE}\nrt <- read.table(\"all_summary.txt\",header = TRUE, sep = \";\", comment.char = \"\")\n```\n\nUsuwanie danych z błędnym res_name\n---\n```{r usuwanie błędnych res_name, cache=TRUE}\nfiltered1 <- rt %>%\n       filter(!is.na(res_name)) %>%\n       filter(!is.nan(res_name)) %>%\n       filter(res_name != \"DA\",res_name !=\"DC\",res_name !=\"DT\", res_name !=\"DU\",res_name != \"DG\", res_name !=\"DI\",res_name !=\"UNK\", res_name !=\"UNX\", res_name !=\"UNL\", res_name !=\"PR\", res_name !=\"PD\", res_name !=\"Y1\", res_name !=\"EU\", res_name !=\"N\", res_name !=\"15P\", res_name !=\"UQ\", res_name !=\"PX4\")\n```\n\nUsuwanie duplikatów par (pdb_code, res_name)\n---\n```{r usuwanie duplikatów pdb_code i res_name, cache=TRUE}\ndistinct <- filtered1 %>% distinct(pdb_code, res_name)\n```\n\nPodsumowanie wartości w kolumnach\n---\n```{r podsumowanie wartosci, cache=TRUE}\nknitr::kable(summary(distinct))\n```\n\nKorelacja między kolumnami\n---\n```{r wybranie kolumn nie part i numerycznych, cache=TRUE}\nno_part_columns <- select(distinct, -starts_with(\"part\"))\nnemericTab <- no_part_columns[,sapply(no_part_columns, is.numeric)]\ncorColumns <- select(nemericTab, one_of(c(\"local_volume\", \"local_electrons\", \"local_mean\" ,\"local_std\", \"local_max\", \"local_skewness\",\"local_parts\")))\n```\n```{r korelacja}\ncorelationTable <- cor(corColumns, use=\"complete.obs\")\n```\n```{r korelacja widok}\nknitr::kable(corelationTable)\ncor.plot(mat.sort(corelationTable),TRUE,zlim=c(0,1), main=\"korelacja\")\n```\n\nLiczebność klas res_name\n---\n```{r liczebność klas res_name}\nuniqRes_name <- group_by(distinct,res_name)\nsummarise(uniqRes_name, count=n())\n```\n\nRozkład liczby elektronów i liczby atomów\n---\n```{r wykres liczby atomów i elektronów}\natomy <- ggplot2::ggplot(distinct, aes(local_res_atom_non_h_count)) + ggplot2::geom_histogram(binwidth = 1) +ggplot2::ggtitle(\"Rozkład liczby atomów\")\nelektrony <- ggplot2::ggplot(distinct, aes(local_res_atom_non_h_electron_sum)) + ggplot2::geom_histogram(binwidth = 5) +ggplot2::ggtitle(\"Rozkład liczby elektronów\")\n```\n```{r , echo=FALSE}\natomy\n```\n```{r , echo=FALSE}\nelektrony\n```\n\nWykres\n---\n```{r odtwarzanie wykresu, warning=FALSE, message=FALSE}\nwykres <- ggplot2::ggplot(distinct, aes(x=local_res_atom_non_h_electron_sum, y=local_res_atom_non_h_count))\nwykres <- wykres + ggplot2::stat_density_2d(geom = \"tile\", aes(fill = ..density..), contour = FALSE)\nwykres <- wykres + ggplot2::scale_fill_distiller(palette = \"Spectral\")+ ggplot2::scale_x_continuous(breaks=seq(100,601,100)) + ggplot2::scale_y_continuous(breaks=seq(20,101,20)) \nwykres <- wykres + ggplot2::theme(legend.position = \"none\", axis.title.x = element_blank() , axis.title.y = element_blank(), plot.background = element_blank(), \npanel.border = element_blank(), \npanel.background = element_blank())\nwykres <- wykres + ggplot2::ylim(0,100)+ggplot2::xlim(0,650)\n\n\nthemeEmpt <- ggplot2::theme(                              \nplot.background = element_blank(), \npanel.grid.major = element_blank(), \npanel.grid.minor = element_blank(), \npanel.border = element_blank(), \npanel.background = element_blank(),\naxis.title.x = element_blank(),\naxis.title.y = element_blank(),\naxis.text.x = element_blank(),\naxis.text.y = element_blank(),\naxis.ticks = element_blank()\n)\n\nempty <- ggplot2::ggplot()+ggplot2::geom_point(aes(1,1), color=\"white\") + themeEmpt\n```\n```{r dalej odtwarzanie}\natomy <- ggplot2::ggplot(distinct, aes(local_res_atom_non_h_count, fill=\"red\", color=\"black\")) + ggplot2::geom_histogram(binwidth = 1)+ggplot2::coord_flip()+ themeEmpt + \nggplot2::theme(legend.position = \"none\")\n\nelektrony <- ggplot2::ggplot(distinct, aes(local_res_atom_non_h_electron_sum, fill=\"red\", color=\"black\")) + ggplot2::geom_histogram(binwidth = 5)+ themeEmpt + \nggplot2::theme(legend.position = \"none\")\n\ngrid.arrange(elektrony, empty, wykres, atomy, ncol=2, nrow=2, widths=c(4, 1), heights=c(1, 4))\n\n```\n\nTabele pokazujące po 10 klas z największą niezgodnością atomów i elektronów.\n---\n```{r tabele niezgodności atomóW i elektronów}\nniezgodnosc_atomow <- distinct %>% filter(!is.na(dict_atom_non_h_count)) %>% mutate(niezg_atomy = dict_atom_non_h_count-local_res_atom_non_h_count) %>% group_by(res_name) %>% summarise(\n        count = n(),\n        srednia_niezgodnosc_atomy=mean(niezg_atomy)) %>% arrange(desc(srednia_niezgodnosc_atomy))\n\nknitr::kable(head(niezgodnosc_atomow,10))\n\nniezgodnosc_elektronow <- distinct %>% filter(!is.na(dict_atom_non_h_electron_sum)) %>% mutate(niezg_elektrony = dict_atom_non_h_electron_sum - local_res_atom_non_h_electron_sum) %>% group_by(res_name) %>% summarise(\n        count = n(),\n        srednia_niezgodnosc_elektrony=mean(niezg_elektrony)) %>% arrange(desc(srednia_niezgodnosc_elektrony))\n\nknitr::kable(head(niezgodnosc_elektronow,10))\n```\n\nRozkład wartości kolumn zaczynających się od part_01 z średnią wartośią\n---\n```{r rozkład wartości kolumn part_01, message=FALSE, warning=FALSE, cache=TRUE}\npart_01_columns <- select(distinct, starts_with(\"part_01\"))\n\n HistsPlots <- function(var1) {\n     mean_part <- mean(part_01_columns[,var1], na.rm=T)\n     print( ggplot(data = part_01_columns,\n     aes(part_01_columns[,var1]),\n     environment = environment()) + geom_histogram() \n     +geom_vline(aes(xintercept=mean(part_01_columns[,var1], na.rm=T)),\n               color=\"red\", linetype=\"dashed\", size=1) \n     + geom_text(aes(mean_part,0,label = round(mean_part,2), vjust = -1))\n     + labs(title=var1, x=element_blank(), y=\"count\"))\n }\n```\n\n```{r rysowanie rozkładów wartości kolumn part_01, message=FALSE, warning=FALSE, results='hide'}\nmapply(HistsPlots, var1=names(part_01_columns))\n```\n\nRegresja liczby atomów i elektronów\n---\n```{r regresja przygotowanie, warning=FALSE}\ndistinctTmp <- distinct %>% filter(!is.na(local_res_atom_non_h_count)) %>%\n  filter(!is.na(local_res_atom_non_h_electron_sum)) %>% filter(!is.nan(local_res_atom_non_h_count)) %>%\n  filter(!is.nan(local_res_atom_non_h_electron_sum))\n\ndistinctRegr <- distinctTmp %>% select(local_res_atom_non_h_count,\n                                      part_00_blob_electron_sum:part_00_density_sqrt_E3)\nRegrAtom <- distinctRegr[complete.cases(distinctRegr),]\n\ndistinctRegr <- distinctTmp %>% select(local_res_atom_non_h_electron_sum,\n                                      part_00_blob_electron_sum:part_00_density_sqrt_E3)\nRegrElektron <- distinctRegr[complete.cases(distinctRegr),]\n```\n\nRegresja liczby atomów\n\n```{r regresja atom, warning=FALSE}\ninTraining <- createDataPartition(y=RegrAtom$local_res_atom_non_h_count, p= .75, list = FALSE)\ntraining <- RegrAtom[  inTraining,]\ntesting <- RegrAtom[ -inTraining,]\nfit <- train(local_res_atom_non_h_count ~ . ,\n             data = training,\n             method = \"lm\")\nfit\npredictedVal <- predict(fit, newdata = na.omit(testing))\nmodelvalues<-data.frame(obs = testing$local_res_atom_non_h_count, pred=predictedVal)\ndefaultSummary(modelvalues)\n```\n\nRegresja liczby elektronów\n\n```{r regresj elektronóW, warning=FALSE}\ninTraining <- createDataPartition(y=RegrElektron$local_res_atom_non_h_electron_sum, p= .75, list = FALSE)\ntraining <- RegrElektron[  inTraining,]\ntesting <- RegrElektron[ -inTraining,]\nfit <- train(local_res_atom_non_h_electron_sum ~ . ,\n             data = training,\n             method = \"lm\")\nfit\npredictedVal <- predict(fit, newdata = na.omit(testing))\nmodelvalues<-data.frame(obs = testing$local_res_atom_non_h_electron_sum, pred=predictedVal)\ndefaultSummary(modelvalues)\n```\n\n\n```{r klasyfikacja res_name, echo=FALSE, eval=FALSE}\ndistinctTmp <- distinct %>% filter(!is.na(res_name)) %>% filter(!is.nan(res_name)) %>%\n  group_by(res_name) %>% summarise(count =n()) %>% filter(count>20)\ndistinctNowe <- distinct %>% subset(res_name %in% distinctTmp$res_name) %>% filter(!is.na(res_name)) %>% filter(!is.nan(res_name))\n\ndistinctKlas <- distinctNowe %>% select(res_name, part_00_blob_electron_sum:part_00_density_sqrt_E3)\nKlasyfik <- distinctKlas[complete.cases(distinctKlas),]\nsummary(Klasyfik)\ninTraining <- createDataPartition(y=distinctTmp$res_name, p= .3, list = FALSE)\nkable(inTraining)\ntraining <- Klasyfik[  inTraining,]\ntesting <- Klasyfik[ -inTraining,]\nkable(summary(training))\nlevels(Klasyfik)\nlevels(training)\nlevels(testing)\n#gridCtrl <- trainControl(\n#    method = \"cv\",\n#    number = 2)\n#fitTune <- train(res_name ~ .,\n#             data = training,\n#             method = \"pls\",\n#             preProc = c(\"center\", \"scale\"))\n#fitTune\n```",
    "created" : 1453633539830.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4084798018",
    "id" : "12803BF4",
    "lastKnownWriteTime" : 1454813055,
    "path" : "~/PDB/raportPDB.Rmd",
    "project_path" : "raportPDB.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_markdown"
}